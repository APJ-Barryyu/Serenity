<Project>
  <UsingTask TaskName="RestoreNodeTypesTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <FolderNames ParameterType="System.String" />
      <PatchDependencies ParameterType="System.String" />
    </ParameterGroup>    
    <Task>
      <Reference Include="$(NugetPackageRoot)newtonsoft.json/13.0.3/lib/netstandard2.0/Newtonsoft.Json.dll"/>
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="Newtonsoft.Json" />
      <Using Namespace="Newtonsoft.Json.Linq" />
      <Code Type="Fragment" Language="cs">
<![CDATA[
try
{
    var newDeps = new Dictionary<string, string>();
    foreach (var folderName in (FolderNames ?? "").Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries))
    {
        var pkgPath = Path.Combine("node_modules", ".dotnet", folderName);
        Directory.CreateDirectory(pkgPath);
        var pkgId = folderName.ToLowerInvariant();
        var idx = pkgId.IndexOf('.');
        if (idx > 0)
        {
            var company = pkgId.Substring(0, idx);
            if (company == "serenity")
                company = "serenity-is";
            pkgId = "@" + company + "/" + pkgId.Substring(idx + 1);
        }
        var pkgJson = Path.Combine(pkgPath, "package.json");
        var expectedContent = JsonConvert.SerializeObject(new
        {
            name = pkgId,
            exports = new Dictionary<string, object>
            {
                ["."] = new
                {
                    types = "./dist/index.d.ts",
                    import = "./dist/index.js",
                }
            },
            main = "dist/index.js",
            import = "dist/index.js",
            types = "dist/index.d.ts"
        }, Formatting.Indented).Replace("\r", "");

        if (!File.Exists(pkgJson) || File.ReadAllText(pkgJson) != expectedContent)
            File.WriteAllText(pkgJson, expectedContent);

        newDeps[pkgId] = "file:./node_modules/.dotnet/" + folderName.Replace("\"", "\\\"");
    }

    var packageJson = "package.json";
    if (PatchDependencies != "false")
    {
        if (!File.Exists(packageJson))
        {
            Log.LogWarning("Can't find package.json");
            return Success;
        }
        var oldJson = File.ReadAllText(packageJson).Replace("\r", "").Trim();
        var root = JObject.Parse(oldJson);
        var oldDeps = root?["dependencies"] as JObject;
        if (oldDeps == null)
        {
            Log.LogWarning("Can't find dependencies node in package.json");
            return Success;
        }
        foreach (var x in oldDeps)
        {
            if (!newDeps.ContainsKey(x.Key) &&
                x.Value.Value<string>()?.StartsWith("file:./node_modules/.dotnet/", StringComparison.Ordinal) != true)
                newDeps[x.Key] = x.Value.Value<string>();
        }
        oldDeps.RemoveAll();
        foreach (var x in newDeps.OrderBy(x => x.Key, StringComparer.Ordinal))
            oldDeps.Add(x.Key, x.Value);
        var newJson = root.ToString().Replace("\r", "");
        if (oldJson != newJson)
            File.WriteAllBytes(packageJson, Encoding.UTF8.GetBytes(newJson.Replace("\r", "")));
    }
}
catch (Exception ex)
{
    Log.LogWarning("Error during RestoreNodeTypesTask: " + ex.ToString());
}
]]>
      </Code>
    </Task>
  </UsingTask>    

  <PropertyGroup>
    <RestoreNodeTypes Condition="'$(RestoreNodeTypes)' == '' And Exists('$(MSBuildProjectDirectory)\tsconfig.json')">true</RestoreNodeTypes>
    <CompileTypeScriptDependsOn Condition="'$(RestoreNodeTypes)' != 'false'">RestoreNodeTypes;$(CompileTypeScriptDependsOn)</CompileTypeScriptDependsOn>
    <RestoreTypings Condition="'$(RestoreTypings)' == '' And Exists('$(MSBuildProjectDirectory)\tsconfig.json') And (!Exists('$(MSBuildProjectDirectory)\tsbuild.js') Or Exists('$(MsBuildProjectDirectory)\Namespaces\tsconfig.json'))">true</RestoreTypings>
    <CompileTypeScriptDependsOn Condition="'$(RestoreTypings)' != 'false'">RestoreTypings;$(CompileTypeScriptDependsOn)</CompileTypeScriptDependsOn>
  </PropertyGroup>
  <ItemGroup>
    <Content Remove="texts\resources\**\*.json" />
    <EmbeddedResource Include="texts\resources\**\*.json" WithCulture="false" Culture="" />
  </ItemGroup>
  <Target Name="RestoreNodeTypes" DependsOnTargets="ResolvePackageAssets;IncludeTransitiveProjectReferences" BeforeTargets="BeforeBuild" Condition="'$(RestoreNodeTypes)' != 'false'">
    <ItemGroup>
      <_NodeTypeToRestore Include="%(ProjectReference.RootDir)%(Directory)dist\**\*.*" Condition="'$(RestoreNodeTypes)' != 'false'">
        <FolderName>%(ProjectReference.Filename)</FolderName>
      </_NodeTypeToRestore>
      <_NodeTypeToRestore Include="%(RuntimeCopyLocalItems.RootDir)%(Directory)..\..\dist\**\*.*" Condition="'$(RestoreNodeTypes)' != 'false'">
        <FolderName>%(RuntimeCopyLocalItems.NuGetPackageId)</FolderName>
      </_NodeTypeToRestore>
      <_NodeTypeDeleteFiles Include="node_modules\.dotnet\**\*.*" Exclude="@(_NodeTypeToRestore->'node_modules\.dotnet\%(FolderName)\dist\%(RecursiveDir)%(Filename)%(Extension)');@(_NodeTypeToRestore->'node_modules\.dotnet\%(FolderName)\package.json'->Distinct())" />
    </ItemGroup>
    <Delete Files="@(_NodeTypeDeleteFiles)" />
    <Copy SourceFiles="@(_NodeTypeToRestore)" DestinationFiles="@(_NodeTypeToRestore->'node_modules\.dotnet\%(FolderName)\dist\%(RecursiveDir)%(Filename)%(Extension)')" SkipUnchangedFiles="true" />
    <RestoreNodeTypesTask FolderNames="@(_NodeTypeToRestore->'%(FolderName)'->Distinct())" PatchDependencies="$(RestoreNodeTypesPatchDependencies)" ContinueOnError="true" />
  </Target>
  <Target Name="RestoreTypings"
        BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun"
        DependsOnTargets="$(ResolveStaticWebAssetsConfiguration);IncludeTransitiveProjectReferences;RestoreNodeTypes"
        Condition="'$(RestoreTypings)' != 'false' And Exists('$(MSBuildProjectDirectory)\tsconfig.json')">
    <ItemGroup>
      <!--project reference typing, serenity.scripts -->
      <_TypingToRestore Include="%(ProjectReference.RootDir)%(ProjectReference.Directory)wwwroot\Serenity.CoreLib.d.ts"
                        Condition="'$(RestoreTypings)' == 'true' And Exists('%(ProjectReference.RootDir)%(ProjectReference.Directory)wwwroot\Serenity.CoreLib.d.ts')">
        <TargetFile>typings\serenity.corelib\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- project reference typings all others -->
      <_TypingToRestore Include="%(ProjectReference.RootDir)%(ProjectReference.Directory)wwwroot\index.d.ts"
                        Condition="'$(RestoreTypings)' == 'true' And '%(ProjectReference.Filename)' != '' And '%(ProjectReference.Filename)' != '$(ProjectName)' And Exists('%(ProjectReference.RootDir)%(ProjectReference.Directory)wwwroot\index.d.ts')">
        <TargetFile>typings\%(ProjectReference.Filename)\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- nuget package typings from wwwroot -->
      <_TypingToRestore Include="%(StaticWebAsset.RootDir)%(Directory)%(Filename).d.ts"
                        Condition="'$(RestoreTypings)' == 'true' And '%(StaticWebAsset.SourceType)' == 'Project' And '%(Extension)' == '.js' And Exists('%(RootDir)%(Directory)%(Filename).d.ts') And $([System.String]::Copy('%(Directory)').Replace('\','/').EndsWith('wwwroot/'))">
        <TargetFile Condition="'%(StaticWebAsset.SourceId)' != 'Serenity.Scripts'">typings\%(StaticWebAsset.SourceId)\index.d.ts</TargetFile>
        <TargetFile Condition="'%(StaticWebAsset.SourceId)' == 'Serenity.Scripts'">typings\serenity.corelib\index.d.ts</TargetFile>
      </_TypingToRestore>
      <!-- nuget package typings from typings\**\index.d.ts files -->
      <_TypingToRestore Include="%(StaticWebAsset.RootDir)%(Directory)..\typings\**\index.d.ts"
                        Condition="'$(RestoreTypings)' == 'true' And '%(StaticWebAsset.SourceType)' == 'Package' And '%(Extension)' == '.js' And $([System.String]::Copy('%(Directory)').Replace('\','/').EndsWith('staticwebassets/'))">
        <TargetFile Condition="'%(StaticWebAsset.SourceId)' != 'Serenity.Scripts'">typings\%(StaticWebAsset.SourceId)\index.d.ts</TargetFile>
        <TargetFile Condition="'%(StaticWebAsset.SourceId)' == 'Serenity.Scripts'">typings\serenity.corelib\index.d.ts</TargetFile>
      </_TypingToRestore>
    </ItemGroup>
    <Copy SourceFiles="@(_TypingToRestore)" DestinationFiles="@(_TypingToRestore->'%(TargetFile)'->ToLowerInvariant())" SkipUnchangedFiles="true" />
  </Target>
</Project>
